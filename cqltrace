#!/bin/bash
# For tracing slow queries in real time
# Author: Joey Lynch

function usage() {
    echo "Trace CQL traffic from a pcap file"
    echo
    echo "usage: cqltrace [-p cql_port] [-bkdrH] input"
    echo "  -p cql_port     Decodes traffic on this port as CQL. Particularlly"
    echo "                  important for non standard CQL ports (9042)"
    echo "  -b              Show bound variables in prepared statements [expensive]"
    echo "  -k              Show just the bound partition keys (requires -b)"
    echo "  -d              Decode prepared statements if possible"
    echo "  -r              Parse queries only, with no latency measurements. Use this"
    echo "                  with the -r option in cqlcap for maximum performance"
    echo "  -H              Show headers at the top"
    echo "  input           The input file to read from, use - for stdout"
    exit 0
}

PORT=9042
PRINT_BINDS=false
PRINT_PK_BIND_ONLY=false
DECODE_PREPARED=false
REQUEST_ONLY=false
SHOW_HEADER=false

while getopts ":p:hbkdrH" opt; do
    case $opt in
        p)
            PORT=$OPTARG
            ;;
        h)
            usage
            ;;
        b)
            PRINT_BINDS=true
            ;;
        d)
            DECODE_PREPARED=true
            ;;
        k)
            PRINT_PK_BIND_ONLY=true
            ;;
        r)
            REQUEST_ONLY=true
            ;;
        H)
            SHOW_HEADER=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
    esac
done
shift $((OPTIND-1))

if [ $# -ne 1 ]; then
    usage
fi

INPUT="${1}"

export PRINT_BINDS
export PRINT_PK_BIND_ONLY
export DECODE_PREPARED
export REQUEST_ONLY
export SHOW_HEADER

exec tshark -d tcp.port==$PORT,cql -q -X lua_script:src/query_latency.lua -r ${INPUT}
